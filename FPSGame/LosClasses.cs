using System;
using System.Collections.Generic;
using System.Threading;


namespace FPSGame
{
    class GameRoom
    {
        public
        static string[] also = new string[80];
        //Console window is 80 width by 25 height
        static List<string> Room = new List<string>();

        //Player stats
        public static double playermovespeed = 1f;
        public static double playerxpos = 5f;
        public static double playerypos = 5f;
        public static double playerrot = 0f;

        //the screen updation
        public static char[,] Screen = new char[25, 80];
        static Thread shower;


        //block stats
        public static int height = 3;
        


        public static void init()
        {
            Room.Add("##############################################################################################################################");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#........................................................................................#######.............................#");
            Room.Add("#........................................................................................#######.............................#");
            Room.Add("#........................................................................................#######.............................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("#............................................................................................................................#");
            Room.Add("##############################################################################################################################");


            
        }

        
        static bool isawall(int x, int y)
        {
            bool b = true;
            if (x >= 0 && y >= 0)
            {
               if (Room[y].ToCharArray()[x] == '.')
                {
                    b = false;
                }
            }
            return b;
        }

        
        static double[] playerposition()
        {
            return new double[3] { playerxpos, playerypos, playerrot };
        }

        public static void startshowing()
        {
            shower = new Thread(new ThreadStart(display));
            shower.Start();
        }

        public static void stopshowing()
        {
            shower.Abort();
        }

        static void display()
        {

            while (true)
            {
                Console.SetCursorPosition(0, 0);
                foreach (char block in Screen)
                {
                    Console.Write(block);
                }

            }

        }


        public static void startupdating()
        {

            Thread updating = new Thread(new ThreadStart(update));
            updating.Start();

        }




        static void update()
        {

            double aconst = 0.01f;
            int c = 2;

            while (true)
            {
                List<ColumnInfo> colinf = castrays();

                for (int i = 0; i < 80; i++)
                {
                    double colheight = 1 / (colinf[i].distance * aconst);
                    bool walled = false;

                    if (0 <= colinf[i].distance && colinf[i].distance <= 3)
                    {                        
                        int start = 12 - (int)colheight / 2;
                        int end = (int)colheight + start;

                        for (int x = 0; x < 25; x++)
                        {
                            if (x > start && x < end)
                            {
                                Screen[x, i] = '█';
                                //walled = true;
                            }
                            else
                            {
                                Screen[x, i] = ' ';
                            }
                        }
                    }
                    else if (4 <= colinf[i].distance && colinf[i].distance <= 9)
                    {                        
                        int start = 12 - (int)colheight / 2;
                        int end = (int)colheight + start;

                        for (int x = 0; x < 25; x++)
                        {
                            if (x > start && x < end)
                            {
                                Screen[x, i] = '▓';
                               //walled = true;
                            }
                            else
                            {
                                Screen[x, i] = ' ';
                            }
                        }
                    }
                    else if (10 <= colinf[i].distance && colinf[i].distance <= 16)
                    {                        
                        int start = 12 - (int)colheight / 2;
                        int end = (int)colheight + start;

                        for (int x = 0; x < 25; x++)
                        {
                            if (x > start && x < end)
                            {
                                Screen[x, i] = '▒';
                                //walled = true;
                            }
                            else
                            {
                                Screen[x, i] = ' ';
                            }
                        }
                    }
                    else if (17 <= colinf[i].distance)
                    {                        
                        int start = 12 - (int)colheight / 2;
                        int end = (int)colheight + start;

                        for (int x = 0; x < 25; x++)
                        {
                            if (x > start && x < end)
                            {
                                Screen[x, i] = '░';
                                //walled = true;
                            }
                            else
                            {
                                Screen[x, i] = ' ';
                            }
                        }
                    }
                        
                   
                    
                }

            }
        }

        public static List<ColumnInfo> castrays()
        {
            List<ColumnInfo> info = new List<ColumnInfo>();


            for (int i = 0; i < 80; i++)
            {
                ColumnInfo thiscol = new ColumnInfo();
                int deg = i + (int) playerrot;
                double increment = 0.01f, distance_covered = 0f;
                double check_x = playerxpos, check_y = playerypos;
                double ycov = increment * Math.Cos(Program.convert(deg));
                double xcov = increment * Math.Sin(Program.convert(deg));


                while (true)
                {
                    distance_covered += increment;
                    if (isawall((int) check_x, (int) check_y)) break;
                    check_x += xcov;
                    check_y -= ycov;
                    
                }

                thiscol.distance = distance_covered;
                info.Add(thiscol);

            }



            return info;

        }



        
    }

    class ColumnInfo
	{

        //public bool detected { get; set; }
        public double distance { get; set; }
		
	}

    

   
}
